Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


Solution:  We are using sliding window technique to find all anagrams in a string .here time complexity is O(n) and space complexity is O(1).


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
       List<Integer> result=new ArrayList<>();
       int n=s.length();
       int m=p.length();
       if(m>n){
        return result;
       } 
       int scount[]=new int[26];
       int pcount[]=new int[26];
       for(char c:p.toCharArray()){
        pcount[c-'a']++;
       }
       for(int i=0;i<n;i++){
        scount[s.charAt(i)-'a']++;
        if(i>=m){
            scount[s.charAt(i-m)-'a']--;

        }
        if(i>=m-1 && Arrays.equals(scount,pcount)){
            result.add(i-m+1);
        }
       }
       return result;
    }
}
